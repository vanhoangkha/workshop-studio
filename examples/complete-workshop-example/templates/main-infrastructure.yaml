AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete Serverless Web Application Infrastructure - Main Stack'

Parameters:
  EnvironmentName:
    Description: Environment name prefix for resources
    Type: String
    Default: ServerlessWorkshop
    
  DomainName:
    Description: Domain name for the application (optional)
    Type: String
    Default: ''
    
  CertificateArn:
    Description: SSL Certificate ARN for CloudFront (optional)
    Type: String
    Default: ''

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]

Resources:
  # DynamoDB Table for Tasks
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${EnvironmentName}-Tasks'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: dueDate
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserTasksIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: dueDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: dueDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Tasks-Table'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Workshop
          Value: ServerlessWebApp

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${EnvironmentName}-UserPool'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: given_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Required: true
          Mutable: true
      UserPoolTags:
        Name: !Sub '${EnvironmentName}-UserPool'
        Environment: !Ref EnvironmentName

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${EnvironmentName}-WebClient'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:3000
        - !If 
          - HasDomainName
          - !Sub 'https://${DomainName}'
          - 'https://example.com'
      LogoutURLs:
        - http://localhost:3000
        - !If 
          - HasDomainName
          - !Sub 'https://${DomainName}'
          - 'https://example.com'
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  # Cognito Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub '${EnvironmentName}_IdentityPool'
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt TasksTable.Arn
                  - !Sub '${TasksTable.Arn}/index/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  # Lambda Functions
  CreateTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentName}-CreateTask'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref TasksTable
          AWS_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
          const { DynamoDBDocumentClient, PutCommand } = require('@aws-sdk/lib-dynamodb');
          const { v4: uuidv4 } = require('uuid');
          
          const client = new DynamoDBClient({});
          const docClient = DynamoDBDocumentClient.from(client);
          
          exports.handler = async (event) => {
              console.log('Event:', JSON.stringify(event, null, 2));
              
              try {
                  const body = JSON.parse(event.body);
                  const now = new Date().toISOString();
                  
                  const task = {
                      taskId: uuidv4(),
                      userId: body.userId,
                      title: body.title,
                      description: body.description || '',
                      status: body.status || 'TODO',
                      priority: body.priority || 'MEDIUM',
                      dueDate: body.dueDate || null,
                      tags: body.tags || [],
                      createdAt: now,
                      updatedAt: now
                  };
                  
                  await docClient.send(new PutCommand({
                      TableName: process.env.TABLE_NAME,
                      Item: task
                  }));
                  
                  return {
                      statusCode: 201,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({ success: true, data: task })
                  };
              } catch (error) {
                  console.error('Error:', error);
                  return {
                      statusCode: 500,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({ success: false, error: error.message })
                  };
              }
          };
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-CreateTask'
        - Key: Environment
          Value: !Ref EnvironmentName

  GetTasksFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentName}-GetTasks'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref TasksTable
          AWS_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
          const { DynamoDBDocumentClient, GetCommand, QueryCommand } = require('@aws-sdk/lib-dynamodb');
          
          const client = new DynamoDBClient({});
          const docClient = DynamoDBDocumentClient.from(client);
          
          exports.handler = async (event) => {
              console.log('Event:', JSON.stringify(event, null, 2));
              
              try {
                  const { pathParameters, queryStringParameters } = event;
                  
                  if (pathParameters && pathParameters.taskId) {
                      const result = await docClient.send(new GetCommand({
                          TableName: process.env.TABLE_NAME,
                          Key: { taskId: pathParameters.taskId }
                      }));
                      
                      if (!result.Item) {
                          return {
                              statusCode: 404,
                              headers: { 'Access-Control-Allow-Origin': '*' },
                              body: JSON.stringify({ success: false, error: 'Task not found' })
                          };
                      }
                      
                      return {
                          statusCode: 200,
                          headers: { 'Access-Control-Allow-Origin': '*' },
                          body: JSON.stringify({ success: true, data: result.Item })
                      };
                  }
                  
                  const userId = queryStringParameters?.userId;
                  if (!userId) {
                      return {
                          statusCode: 400,
                          headers: { 'Access-Control-Allow-Origin': '*' },
                          body: JSON.stringify({ success: false, error: 'userId is required' })
                      };
                  }
                  
                  const result = await docClient.send(new QueryCommand({
                      TableName: process.env.TABLE_NAME,
                      IndexName: 'UserTasksIndex',
                      KeyConditionExpression: 'userId = :userId',
                      ExpressionAttributeValues: { ':userId': userId },
                      ScanIndexForward: false
                  }));
                  
                  return {
                      statusCode: 200,
                      headers: { 'Access-Control-Allow-Origin': '*' },
                      body: JSON.stringify({ 
                          success: true, 
                          data: { tasks: result.Items || [], count: result.Items?.length || 0 }
                      })
                  };
              } catch (error) {
                  console.error('Error:', error);
                  return {
                      statusCode: 500,
                      headers: { 'Access-Control-Allow-Origin': '*' },
                      body: JSON.stringify({ success: false, error: error.message })
                  };
              }
          };
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-GetTasks'

  UpdateTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentName}-UpdateTask'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref TasksTable
          AWS_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
          const { DynamoDBDocumentClient, UpdateCommand } = require('@aws-sdk/lib-dynamodb');
          
          const client = new DynamoDBClient({});
          const docClient = DynamoDBDocumentClient.from(client);
          
          exports.handler = async (event) => {
              try {
                  const taskId = event.pathParameters.taskId;
                  const updates = JSON.parse(event.body);
                  
                  const updateExpression = [];
                  const expressionAttributeNames = {};
                  const expressionAttributeValues = {};
                  
                  Object.keys(updates).forEach(key => {
                      if (key !== 'taskId' && key !== 'userId' && key !== 'createdAt') {
                          updateExpression.push(`#${key} = :${key}`);
                          expressionAttributeNames[`#${key}`] = key;
                          expressionAttributeValues[`:${key}`] = updates[key];
                      }
                  });
                  
                  updateExpression.push('#updatedAt = :updatedAt');
                  expressionAttributeNames['#updatedAt'] = 'updatedAt';
                  expressionAttributeValues[':updatedAt'] = new Date().toISOString();
                  
                  const result = await docClient.send(new UpdateCommand({
                      TableName: process.env.TABLE_NAME,
                      Key: { taskId },
                      UpdateExpression: `SET ${updateExpression.join(', ')}`,
                      ExpressionAttributeNames: expressionAttributeNames,
                      ExpressionAttributeValues: expressionAttributeValues,
                      ReturnValues: 'ALL_NEW'
                  }));
                  
                  return {
                      statusCode: 200,
                      headers: { 'Access-Control-Allow-Origin': '*' },
                      body: JSON.stringify({ success: true, data: result.Attributes })
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      headers: { 'Access-Control-Allow-Origin': '*' },
                      body: JSON.stringify({ success: false, error: error.message })
                  };
              }
          };

  DeleteTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentName}-DeleteTask'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref TasksTable
          AWS_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
          const { DynamoDBDocumentClient, DeleteCommand } = require('@aws-sdk/lib-dynamodb');
          
          const client = new DynamoDBClient({});
          const docClient = DynamoDBDocumentClient.from(client);
          
          exports.handler = async (event) => {
              try {
                  const taskId = event.pathParameters.taskId;
                  
                  await docClient.send(new DeleteCommand({
                      TableName: process.env.TABLE_NAME,
                      Key: { taskId }
                  }));
                  
                  return {
                      statusCode: 200,
                      headers: { 'Access-Control-Allow-Origin': '*' },
                      body: JSON.stringify({ success: true, message: 'Task deleted successfully' })
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      headers: { 'Access-Control-Allow-Origin': '*' },
                      body: JSON.stringify({ success: false, error: error.message })
                  };
              }
          };

  # API Gateway
  TasksApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${EnvironmentName}-TasksAPI'
      Description: REST API for Task Management Application
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: '*'

  # API Gateway Resources and Methods
  TasksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TasksApi
      ParentId: !GetAtt TasksApi.RootResourceId
      PathPart: tasks

  TaskResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TasksApi
      ParentId: !Ref TasksResource
      PathPart: '{taskId}'

  # CORS Options Method for /tasks
  TasksOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TasksApi
      ResourceId: !Ref TasksResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # POST /tasks
  CreateTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TasksApi
      ResourceId: !Ref TasksResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTaskFunction.Arn}/invocations'

  # GET /tasks
  GetTasksMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TasksApi
      ResourceId: !Ref TasksResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTasksFunction.Arn}/invocations'

  # GET /tasks/{taskId}
  GetTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TasksApi
      ResourceId: !Ref TaskResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTasksFunction.Arn}/invocations'

  # PUT /tasks/{taskId}
  UpdateTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TasksApi
      ResourceId: !Ref TaskResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTaskFunction.Arn}/invocations'

  # DELETE /tasks/{taskId}
  DeleteTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TasksApi
      ResourceId: !Ref TaskResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTaskFunction.Arn}/invocations'

  # Lambda Permissions for API Gateway
  CreateTaskPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateTaskFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TasksApi}/*/*'

  GetTasksPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetTasksFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TasksApi}/*/*'

  UpdateTaskPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateTaskFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TasksApi}/*/*'

  DeleteTaskPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteTaskFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TasksApi}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CreateTaskMethod
      - GetTasksMethod
      - GetTaskMethod
      - UpdateTaskMethod
      - DeleteTaskMethod
      - TasksOptionsMethod
    Properties:
      RestApiId: !Ref TasksApi
      StageName: prod

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${EnvironmentName}-frontend-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # S3 Bucket Policy
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket.Arn}/*'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If
          - HasDomainName
          - [!Ref DomainName]
          - !Ref AWS::NoValue
        ViewerCertificate: !If
          - HasCertificate
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
          Compress: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100

Outputs:
  # DynamoDB
  TasksTableName:
    Description: DynamoDB table name for tasks
    Value: !Ref TasksTable
    Export:
      Name: !Sub '${EnvironmentName}-TasksTable'

  TasksTableArn:
    Description: DynamoDB table ARN
    Value: !GetAtt TasksTable.Arn
    Export:
      Name: !Sub '${EnvironmentName}-TasksTable-Arn'

  # Cognito
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${EnvironmentName}-UserPool-Id'

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${EnvironmentName}-UserPoolClient-Id'

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool
    Export:
      Name: !Sub '${EnvironmentName}-IdentityPool-Id'

  # API Gateway
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${TasksApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${EnvironmentName}-ApiGateway-Url'

  # S3 and CloudFront
  FrontendBucketName:
    Description: S3 bucket name for frontend
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${EnvironmentName}-Frontend-Bucket'

  CloudFrontDistributionId:
    Description: CloudFront distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${EnvironmentName}-CloudFront-Id'

  CloudFrontUrl:
    Description: CloudFront distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${EnvironmentName}-CloudFront-Url'

  # Application URLs
  ApplicationUrl:
    Description: Application URL
    Value: !If
      - HasDomainName
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${EnvironmentName}-Application-Url'
